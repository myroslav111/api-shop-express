1.create server.js
/** import app there are our logic */
const app = require('./app');

/** for work with db */
const mongoose = require('mongoose');

const { DB_HOST_CAFE, PORT = 3000 } = process.env;

/** when db exist next step to run server */
mongoose
  .connect(DB_HOST_CAFE)
  .then(() => {
    console.log(`Server running. Use our API on port:${PORT}`);
    app.listen(PORT, '0.0.0.0');
  })
  .catch(error => {
    console.log(error.message);
    process.exit(1);
  });


<---------------------------------------------------------->
2.create app.js
  /** for work with server */
const express = require('express');
/** log event  */
const logger = require('morgan');
/** it helps us  */
const cors = require('cors');
/** library to work with env. files */
require('dotenv').config();

/** init express */
const app = express();

/** starting brake point for work with products */
const productsRouter = require('./routes/api/products');

/** starting brake point for work with users */

/** виводить в консоль статус операції (200 і можливо ще якась інфо) */
const formatsLogger = app.get('env') === 'development' ? 'dev' : 'short';
app.use(logger(formatsLogger));

/** this middleware helps solve problems related to cors */
app.use(cors());

/** this middleware recognizes content type of body */
app.use(express.json());

/** midl access to get file from public without extention by frontend */
// app.use(express.static('public'));
/** here are send our routes */
app.use('/api/products', productsRouter);

/** if front-end require for what is not */
app.use((req, res) => {
  res.status(404).json({ message: 'Not found' });
});

/** if something went wrong */
app.use((err, req, res, next) => {
  const { status = 500, message = 'Server error' } = err;
  res.status(status).json({ message });
});

module.exports = app;


3.create dir routes/api/products
const express = require('express');

const router = express.Router();

const ctrl = require('../../controllers/products');

router.get('/', ctrl.getAllProducts);

module.exports = router;



4.create dir controllers
const getAllProducts = async (req, res) => {
  res.status(200).json('getAllProducts started');
};

module.exports = getAllProducts

5.create products model
6. create helpers handleSabeErrors
7. create reviews models and models schemas
8. create middlewares validateBody
9. create helpers RequestError
10. Joi validation
11. create ctrl add and getAll for products and reviews

